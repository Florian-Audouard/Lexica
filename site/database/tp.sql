CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;
CREATE EXTENSION IF NOT EXISTS pg_trgm;

DROP TABLE IF EXISTS data;
DROP TABLE IF EXISTS langue;
DROP TABLE IF EXISTS livre;

CREATE TABLE livre(
    id_livre int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    libelle text
);
CREATE TABLE langue(
    id_langue int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    libelle text
);



CREATE TABLE data(
    id_data int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_langue int REFERENCES langue(id_langue),
    sens int,
    date_creation TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    traduction text,
    numeroPage int,
    id_livre int
);

CREATE OR REPLACE FUNCTION get_id_langue(l langue.libelle%TYPE)
    RETURNS SETOF langue.id_langue%TYPE AS
    $$
        SELECT id_langue FROM langue WHERE libelle = l
    $$
    LANGUAGE SQL
    STABLE;
    
CREATE OR REPLACE FUNCTION get_id_livre(l livre.libelle%TYPE)
    RETURNS SETOF livre.id_livre%TYPE AS
    $$
        SELECT id_livre FROM livre WHERE libelle = l
    $$
    LANGUAGE SQL
    STABLE;

CREATE OR REPLACE FUNCTION search_two_langue(keyword data.traduction%TYPE, langue_target langue.libelle%TYPE, langue_base langue.libelle%TYPE, offset_num int)
    RETURNS TABLE(
        libelle text,
        traduction text,
        sens int,
        numeroPage int
    )
    LANGUAGE plpgsql AS
    $func$
    BEGIN
        RETURN QUERY
        SELECT langue.libelle,data.traduction,data.sens,data.numeroPage
                        FROM data JOIN langue ON data.id_langue = langue.id_langue 
                        WHERE (data.id_langue=(select get_id_langue(langue_base))
                                OR data.id_langue=(select get_id_langue(langue_target)))
                        AND data.id_data IN
                        (SELECT id_data FROM data INNER JOIN (SELECT data.sens,data.id_langue,max(data.date_creation) FROM data
                            WHERE data.sens IN (SELECT DISTINCT data.sens FROM data
                                                    WHERE to_tsvector(data.traduction) @@ to_tsquery(keyword)
                                                    AND id_langue=(select get_id_langue(langue_base))
                                                    ORDER BY data.sens
                                                    LIMIT 25
                                                    OFFSET offset_num) GROUP BY data.sens,data.id_langue) as tmp 
                                                    on data.sens=tmp.sens and data.id_langue=tmp.id_langue and data.date_creation = tmp.max) ORDER BY data.sens;
    END
    $func$;

CREATE OR REPLACE FUNCTION search_all(keyword data.traduction%TYPE, langue_base langue.libelle%TYPE, offset_num int)
    RETURNS TABLE(
        libelle text,
        traduction text,
        sens int,
        numeroPage int
    )
    LANGUAGE plpgsql AS
    $func$
    BEGIN
        RETURN QUERY
        SELECT langue.libelle,data.traduction,data.sens,data.numeroPage
                        FROM data JOIN langue ON data.id_langue = langue.id_langue
                        WHERE data.id_data IN
                        (SELECT id_data FROM data INNER JOIN (SELECT data.sens,data.id_langue,max(data.date_creation) FROM data
                            WHERE data.sens IN (SELECT DISTINCT data.sens FROM data
                                                    WHERE to_tsvector(data.traduction) @@ to_tsquery(keyword)
                                                    AND id_langue=(select get_id_langue(langue_base))
                                                    ORDER BY data.sens
                                                    LIMIT 25
                                                    OFFSET offset_num) GROUP BY data.sens,data.id_langue) as tmp 
                                                    on data.sens=tmp.sens and data.id_langue=tmp.id_langue and data.date_creation = tmp.max) ORDER BY data.sens;

    END
    $func$;

